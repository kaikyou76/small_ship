import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.4ukD4ZLJ.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"coment/vercel_json.md","filePath":"coment/vercel_json.md"}'),l={name:"coment/vercel_json.md"};function n(o,s,h,r,d,p){return e(),a("div",null,s[0]||(s[0]=[t(`<p>この <code>vercel.json</code> は <strong>Vercel のデプロイ設定ファイル</strong> で、Next.js アプリケーションが Vercel 上でどのようにビルド・ルーティングされるかを制御します。各項目の意味を分解して説明します。</p><hr><h2 id="🛠-設定項目の詳細解説" tabindex="-1">🛠 <strong>設定項目の詳細解説</strong> <a class="header-anchor" href="#🛠-設定項目の詳細解説" aria-label="Permalink to &quot;🛠 **設定項目の詳細解説**&quot;">​</a></h2><h3 id="_1-version-2" tabindex="-1">1. <code>&quot;version&quot;: 2</code> <a class="header-anchor" href="#_1-version-2" aria-label="Permalink to &quot;1. \`&quot;version&quot;: 2\`&quot;">​</a></h3><ul><li><strong>Vercel の設定フォーマットのバージョン</strong> を指定します。 <ul><li><code>2</code> は最新の設定構文です（2021 年以降のプロジェクトはほぼこれを使用）。</li></ul></li></ul><hr><h3 id="_2-builds-ビルド設定" tabindex="-1">2. <code>&quot;builds&quot;</code>（ビルド設定） <a class="header-anchor" href="#_2-builds-ビルド設定" aria-label="Permalink to &quot;2. \`&quot;builds&quot;\`（ビルド設定）&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">builds</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C792EA;">src</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">package.json</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C792EA;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">@vercel/next</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">]</span></span></code></pre></div><ul><li><strong>「どのファイルを基準にビルドするか」</strong> を定義します。 <ul><li><code>src</code>: <code>package.json</code> をビルドの起点として指定。 → Vercel はこのファイルがあるディレクトリを <strong>プロジェクトルート</strong> と認識します。</li><li><code>use</code>: <code>@vercel/next</code> は <strong>Next.js 専用のビルドアダプター</strong>。 → Vercel が自動で <code>next build</code> を実行し、最適化された出力を生成します。</li></ul></li></ul><h4 id="✅-実質的にこれと同じコマンドが実行される" tabindex="-1">✅ 実質的にこれと同じコマンドが実行される: <a class="header-anchor" href="#✅-実質的にこれと同じコマンドが実行される" aria-label="Permalink to &quot;✅ 実質的にこれと同じコマンドが実行される:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#82AAFF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;"> frontend</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;"> build</span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  # next build が実行される</span></span></code></pre></div><hr><h3 id="_3-routes-ルーティング設定" tabindex="-1">3. <code>&quot;routes&quot;</code>（ルーティング設定） <a class="header-anchor" href="#_3-routes-ルーティング設定" aria-label="Permalink to &quot;3. \`&quot;routes&quot;\`（ルーティング設定）&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">routes</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C792EA;">src</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">/(.*)</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C792EA;">dest</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">/$1</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">]</span></span></code></pre></div><ul><li><strong>「すべてのリクエストを Next.js に転送する」</strong> というルールです。 <ul><li><code>src</code>: 正規表現 <code>/(.*)</code> で <strong>すべてのパス</strong> をキャッチ（例: <code>/about</code>, <code>/api/hello</code>）。</li><li><code>dest</code>: <code>/$1</code> でキャッチしたパスを <strong>そのまま Next.js に渡す</strong>。 <ul><li><code>$1</code> は正規表現の <strong>最初のキャプチャグループ</strong>（ここでは <code>.*</code> 部分）を指します。</li></ul></li></ul></li></ul><h4 id="🌟-具体的な挙動例" tabindex="-1">🌟 具体的な挙動例: <a class="header-anchor" href="#🌟-具体的な挙動例" aria-label="Permalink to &quot;🌟 具体的な挙動例:&quot;">​</a></h4><table tabindex="0"><thead><tr><th>ユーザーがアクセス</th><th>Vercel の処理</th></tr></thead><tbody><tr><td><code>https://example.com/about</code></td><td>→ Next.js の <code>/about</code> ページを表示</td></tr><tr><td><code>https://example.com/api/hello</code></td><td>→ Next.js の <code>/api/hello</code> ルートを実行</td></tr></tbody></table><hr><h2 id="❓-なぜこの設定が必要なのか" tabindex="-1">❓ <strong>なぜこの設定が必要なのか？</strong> <a class="header-anchor" href="#❓-なぜこの設定が必要なのか" aria-label="Permalink to &quot;❓ **なぜこの設定が必要なのか？**&quot;">​</a></h2><h3 id="ケース-1-next-js-の機能をフル活用するため" tabindex="-1">ケース 1: Next.js の機能をフル活用するため <a class="header-anchor" href="#ケース-1-next-js-の機能をフル活用するため" aria-label="Permalink to &quot;ケース 1: Next.js の機能をフル活用するため&quot;">​</a></h3><ul><li>Next.js は <strong>ページルーティング</strong>（<code>/pages</code> または <code>/app</code>）や <strong>API ルート</strong>（<code>/pages/api</code>）を持っています。</li><li>すべてのリクエストを Next.js に渡すことで、これらの機能が正しく動作します。</li></ul><h3 id="ケース-2-spa-ssr-のシームレスな対応" tabindex="-1">ケース 2: SPA/SSR のシームレスな対応 <a class="header-anchor" href="#ケース-2-spa-ssr-のシームレスな対応" aria-label="Permalink to &quot;ケース 2: SPA/SSR のシームレスな対応&quot;">​</a></h3><ul><li>動的ルーティング（例: <code>/users/[id]</code>）や静的生成（SSG）もこの設定で自動的に処理されます。</li></ul><hr><h2 id="⚠️-注意点" tabindex="-1">⚠️ <strong>注意点</strong> <a class="header-anchor" href="#⚠️-注意点" aria-label="Permalink to &quot;⚠️ **注意点**&quot;">​</a></h2><h3 id="_1-routes-は省略可能" tabindex="-1">1. <code>routes</code> は省略可能 <a class="header-anchor" href="#_1-routes-は省略可能" aria-label="Permalink to &quot;1. \`routes\` は省略可能&quot;">​</a></h3><ul><li>ほとんどの Next.js プロジェクトでは、<code>builds</code> だけあれば動作します。</li><li>カスタムルーティング（リダイレクトやリライト）が必要な場合にのみ <code>routes</code> を追加します。</li></ul><h3 id="_2-cloudflare-workers-との連携時" tabindex="-1">2. Cloudflare Workers との連携時 <a class="header-anchor" href="#_2-cloudflare-workers-との連携時" aria-label="Permalink to &quot;2. Cloudflare Workers との連携時&quot;">​</a></h3><ul><li>もし <code>frontend</code> から <code>backend</code>（Cloudflare Workers）に API リクエストを送る場合、<strong>CORS 設定</strong>が別途必要になる可能性があります。</li></ul><hr><h2 id="📌-まとめ" tabindex="-1">📌 <strong>まとめ</strong> <a class="header-anchor" href="#📌-まとめ" aria-label="Permalink to &quot;📌 **まとめ**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>設定</th><th>役割</th></tr></thead><tbody><tr><td><code>version</code></td><td>Vercel の設定スキーマバージョン</td></tr><tr><td><code>builds</code></td><td>Next.js プロジェクトのビルド方法を定義</td></tr><tr><td><code>routes</code></td><td>すべてのリクエストを Next.js に転送</td></tr></tbody></table><p>この設定により、<strong>Vercel は <code>frontend</code> ディレクトリを Next.js アプリとして認識し、自動で最適化されたデプロイ</strong> を行います。</p>`,33)]))}const u=i(l,[["render",n]]);export{c as __pageData,u as default};
