import{_ as k,C as n,c as t,o as l,j as i,G as p,ae as F,a,w as e}from"./chunks/framework.Bt0T77vy.js";const c=JSON.parse('{"title":"状態管理 AuthProvider コンポーネント 5.0 完成版","description":"","frontmatter":{},"headers":[],"relativePath":"guide/auth_provider6.md","filePath":"guide/auth_provider6.md"}'),r={name:"guide/auth_provider6.md"};function D(g,s,d,y,E,o){const h=n("think");return l(),t("div",null,[s[1]||(s[1]=i("h1",{id:"状態管理-authprovider-コンポーネント-5-0-完成版",tabindex:"-1"},[a("状態管理 AuthProvider コンポーネント 5.0 完成版 "),i("a",{class:"header-anchor",href:"#状態管理-authprovider-コンポーネント-5-0-完成版","aria-label":'Permalink to "状態管理 AuthProvider コンポーネント 5.0 完成版"'},"​")],-1)),p(h,null,{default:e(()=>s[0]||(s[0]=[a(" まず、AuthProviderのhandleLoginSuccessメソッドにサーバーサイド認証チェックを統合する必要があります。元のコードでは、ログイン成功時に直接ユーザー状態を更新していましたが、これでは/api/users/meの認証チェックが反映されません。そのため、handleLoginSuccess内でfetchリクエストを実行し、サーバーからの応答を待ってから状態を更新するように修正します。 "),i("p",null,"次に、updateAuthState メソッドに自動リダイレクト機能を追加します。これにより、ログイン後のリダイレクト処理が一元管理され、パスのチェックロジックが重複するのを防ぎます。また、依存関係に router を追加して、ルーティングが正しく機能するようにします。",-1),i("p",null,"既存の checkAuth メソッドとの整合性を保つため、トークン検証とサーバーサイドチェックのロジックを共通化します。これにより、コードの重複が削減され、保守性が向上します。さらに、エラーハンドリングを強化し、認証チェック失敗時にはローカルストレージをクリアするようにします。",-1),i("p",null,"最後に、ログアウト処理と初回認証チェックのフローを見直し、状態更新とリダイレクトのタイミングを最適化します。これにより、ユーザーがログイン/ログアウトした際の UI の一貫性が保たれ、予期しない状態の不一致を防ぎます。",-1)])),_:1}),s[2]||(s[2]=F("",7))])}const C=k(r,[["render",D]]);export{c as __pageData,C as default};
