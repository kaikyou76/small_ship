import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.4ukD4ZLJ.js";const o=JSON.parse('{"title":"worker","description":"","frontmatter":{},"headers":[],"relativePath":"coment/worker.md","filePath":"coment/worker.md"}'),l={name:"coment/worker.md"};function h(e,s,k,p,r,F){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="worker" tabindex="-1">worker <a class="header-anchor" href="#worker" aria-label="Permalink to &quot;worker&quot;">​</a></h1><p>以下は、<code>worker.ts</code> の実装流れについての詳細な説明です。このファイルは、Cloudflare Workers のエントリーポイントとして機能し、通常のリクエスト処理や定期実行タスクを管理します。</p><hr><h3 id="worker-の実装流れ" tabindex="-1"><strong>Worker の実装流れ</strong> <a class="header-anchor" href="#worker-の実装流れ" aria-label="Permalink to &quot;**Worker の実装流れ**&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">//backend/src/worker.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> app </span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">./routes/index</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> }</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">./types/types</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#EEFFFF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> ExportedHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;">Env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // 通常のリクエスト処理（GET/POST など）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F07178;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;">    request</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;">    env</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;">    ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> ExecutionContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> app</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // Scheduled イベントが必要な場合（例: cron バッチ処理）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C792EA;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F07178;"> scheduled</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;">    event</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> ScheduledEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;">    env</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;">    ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> ExecutionContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFCB6B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // ここに定期実行タスクなどを実装可能</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">    // 例: データの自動バックアップ、キャッシュのクリアなど</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">export</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h4 id="_1-通常のリクエスト処理" tabindex="-1">1. <strong>通常のリクエスト処理</strong> <a class="header-anchor" href="#_1-通常のリクエスト処理" aria-label="Permalink to &quot;1. **通常のリクエスト処理**&quot;">​</a></h4><ul><li><p><code>fetch</code> メソッドは、クライアントからの HTTP リクエストを処理します。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  request: Request</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  env: Env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  ctx: ExecutionContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">): </span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">Response</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  return app.fetch(request</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><ul><li><p><strong>引数</strong>:</p><ul><li><code>request</code>: クライアントからの HTTP リクエスト。</li><li><code>env</code>: 環境変数（<code>Env</code> 型で定義）。</li><li><code>ctx</code>: 実行コンテキスト（<code>ExecutionContext</code> 型で定義）。</li></ul></li><li><p><strong>処理</strong>:</p><ul><li><code>app.fetch</code> を呼び出し、ルート集約ファイル (<code>routes/index.ts</code>) で定義されたルートにリクエストを渡します。</li><li>ルートハンドラがリクエストを処理し、レスポンスを返します。</li></ul></li></ul></li></ul><h4 id="_2-定期実行タスク" tabindex="-1">2. <strong>定期実行タスク</strong> <a class="header-anchor" href="#_2-定期実行タスク" aria-label="Permalink to &quot;2. **定期実行タスク**&quot;">​</a></h4><ul><li><p><code>scheduled</code> メソッドは、定期実行タスク（例: cron ジョブ）を処理します。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#82AAFF;">scheduled</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  event: ScheduledEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  env: Env</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">  ctx: ExecutionContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;">): </span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#89DDFF;">&lt;void&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // ここに定期実行タスクなどを実装可能</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#545454;--shiki-dark-font-style:italic;">  // 例: データの自動バックアップ、キャッシュのクリアなど</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><ul><li><p><strong>引数</strong>:</p><ul><li><code>event</code>: 定期実行イベント（<code>ScheduledEvent</code> 型で定義）。</li><li><code>env</code>: 環境変数（<code>Env</code> 型で定義）。</li><li><code>ctx</code>: 実行コンテキスト（<code>ExecutionContext</code> 型で定義）。</li></ul></li><li><p><strong>処理</strong>:</p><ul><li>定期実行タスク（例: データの自動バックアップ、キャッシュのクリア）を実装します。</li><li>タスクが完了したら、<code>Promise&lt;void&gt;</code> を返します。</li></ul></li></ul></li></ul><h4 id="_3-worker-のエクスポート" tabindex="-1">3. <strong>Worker のエクスポート</strong> <a class="header-anchor" href="#_3-worker-のエクスポート" aria-label="Permalink to &quot;3. **Worker のエクスポート**&quot;">​</a></h4><ul><li><p><code>worker</code> オブジェクトをエクスポートし、Cloudflare Workers のエントリーポイントとして使用します。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">export</span><span style="--shiki-light:#D73A49;--shiki-light-font-style:inherit;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#EEFFFF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">;</span></span></code></pre></div></li></ul><hr><h3 id="動作の流れ" tabindex="-1"><strong>動作の流れ</strong> <a class="header-anchor" href="#動作の流れ" aria-label="Permalink to &quot;**動作の流れ**&quot;">​</a></h3><ol><li><p><strong>通常のリクエスト処理</strong>:</p><ul><li>クライアントが HTTP リクエストを送信します。</li><li><code>fetch</code> メソッドがリクエストを受け取り、<code>app.fetch</code> に渡します。</li><li>ルートハンドラがリクエストを処理し、レスポンスを返します。</li></ul></li><li><p><strong>定期実行タスク</strong>:</p><ul><li>Cloudflare Workers のスケジューラが定期実行イベントをトリガーします。</li><li><code>scheduled</code> メソッドがイベントを受け取り、定期実行タスクを実行します。</li></ul></li></ol><hr><h3 id="レスポンス例" tabindex="-1"><strong>レスポンス例</strong> <a class="header-anchor" href="#レスポンス例" aria-label="Permalink to &quot;**レスポンス例**&quot;">​</a></h3><h4 id="通常のリクエスト処理" tabindex="-1">通常のリクエスト処理 <a class="header-anchor" href="#通常のリクエスト処理" aria-label="Permalink to &quot;通常のリクエスト処理&quot;">​</a></h4><ul><li><p><strong>成功時</strong>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C792EA;">data</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">Test User</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">email</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">test@example.com</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>エラー時</strong>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light material-theme-darker vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C792EA;">error</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">code</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">NOT_FOUND</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#FFCB6B;">message</span><span style="--shiki-light:#005CC5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C3E88D;">Resource not found</span><span style="--shiki-light:#032F62;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li></ul><h4 id="定期実行タスク" tabindex="-1">定期実行タスク <a class="header-anchor" href="#定期実行タスク" aria-label="Permalink to &quot;定期実行タスク&quot;">​</a></h4><ul><li>定期実行タスクはレスポンスを返しませんが、ログやデータベースの更新などの処理を行います。</li></ul><hr><h3 id="テスト方法" tabindex="-1"><strong>テスト方法</strong> <a class="header-anchor" href="#テスト方法" aria-label="Permalink to &quot;**テスト方法**&quot;">​</a></h3><ol><li><p><strong>通常のリクエスト処理</strong>:</p><ul><li>各エンドポイントに正しいリクエストを送信し、期待されるレスポンスが返されるか確認します。</li><li>無効なリクエストを送信し、適切なエラーレスポンスが返されるか確認します。</li></ul></li><li><p><strong>定期実行タスク</strong>:</p><ul><li>定期実行タスクを手動でトリガーし、期待される処理が実行されるか確認します。</li><li>タスクのログやデータベースの更新を確認します。</li></ul></li></ol><hr><h3 id="補足" tabindex="-1"><strong>補足</strong> <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;**補足**&quot;">​</a></h3><ul><li><p><strong>モジュール化</strong>: <code>fetch</code> メソッドはルート集約ファイル (<code>routes/index.ts</code>) にリクエストを渡すため、ルートの管理が容易です。</p></li><li><p><strong>柔軟性</strong>: <code>scheduled</code> メソッドを使用して、任意の定期実行タスクを実装できます。</p></li><li><p><strong>再利用性</strong>: <code>worker</code> オブジェクトは、任意の Cloudflare Workers プロジェクトで再利用できます。</p></li></ul><hr><p>これで、Worker の実装流れ、動作の流れ、レスポンス例、テスト方法についての説明が完了しました。</p>`,28)]))}const g=i(l,[["render",h]]);export{o as __pageData,g as default};
