import{_ as o,c as a,o as d,ae as c}from"./chunks/framework.4ukD4ZLJ.js";const p=JSON.parse('{"title":"DC-002 を見てからの感想","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/cg2.md","filePath":"tutorial/cg2.md"}'),l={name:"tutorial/cg2.md"};function t(r,e,i,n,s,h){return d(),a("div",null,e[0]||(e[0]=[c('<h1 id="dc-002-を見てからの感想" tabindex="-1">DC-002 を見てからの感想 <a class="header-anchor" href="#dc-002-を見てからの感想" aria-label="Permalink to &quot;DC-002 を見てからの感想&quot;">​</a></h1><p>素晴らしい構成ですね！この構成は、<strong>スケーラブルで保守性が高く、現代的なフルスタックアプリ</strong>にとって理想的です。<br> もちろん、この構成を目指して <strong>段階的に実現していくことは可能</strong>です。以下のようにフェーズを分けて、順に進めていきましょう。</p><hr><h2 id="🔧-段階的な開発フェーズ提案" tabindex="-1">🔧 段階的な開発フェーズ提案 <a class="header-anchor" href="#🔧-段階的な開発フェーズ提案" aria-label="Permalink to &quot;🔧 段階的な開発フェーズ提案&quot;">​</a></h2><h3 id="✅-第-1-フェーズ-プロジェクトの基本構成と商品表示" tabindex="-1">✅ 第 1 フェーズ：プロジェクトの基本構成と商品表示 <a class="header-anchor" href="#✅-第-1-フェーズ-プロジェクトの基本構成と商品表示" aria-label="Permalink to &quot;✅ 第 1 フェーズ：プロジェクトの基本構成と商品表示&quot;">​</a></h3><ul><li>Turborepo で <code>frontend</code>（Next.js）と <code>backend</code>（Hono） を構築</li><li>Cloudflare D1 に <code>products</code> テーブルを作成</li><li><code>GET /products</code>, <code>GET /products/:id</code> API 作成</li><li>フロントで商品一覧と詳細ページ表示</li></ul><p>💡 ここまでで構成全体の土台ができ、商品一覧まで閲覧できます。</p><hr><h3 id="🔐-第-2-フェーズ-ユーザー認証と保護ルートの導入" tabindex="-1">🔐 第 2 フェーズ：ユーザー認証と保護ルートの導入 <a class="header-anchor" href="#🔐-第-2-フェーズ-ユーザー認証と保護ルートの導入" aria-label="Permalink to &quot;🔐 第 2 フェーズ：ユーザー認証と保護ルートの導入&quot;">​</a></h3><ul><li>JWT ベースの認証エンドポイント <code>/auth</code> を作成</li><li><code>jwtMiddleware</code> を実装して <code>/cart</code>, <code>/checkout</code> を保護</li><li>frontend 側で <code>(protected)</code> グループルート導入</li></ul><hr><h3 id="🛒-第-3-フェーズ-カート・購入フロー" tabindex="-1">🛒 第 3 フェーズ：カート・購入フロー <a class="header-anchor" href="#🛒-第-3-フェーズ-カート・購入フロー" aria-label="Permalink to &quot;🛒 第 3 フェーズ：カート・購入フロー&quot;">​</a></h3><ul><li><code>cart</code> テーブルの作成と <code>/cart</code> API 実装（取得・追加・削除）</li><li>frontend 側で <code>cart.ts</code>, <code>cart/</code> ページ、カート UI 実装</li><li><code>/checkout</code> ルートの決済 UI 仮構築（本物の決済連携は後で）</li></ul><hr><h3 id="🧰-第-4-フェーズ-共通コンポーネント・ui-強化" tabindex="-1">🧰 第 4 フェーズ：共通コンポーネント・UI 強化 <a class="header-anchor" href="#🧰-第-4-フェーズ-共通コンポーネント・ui-強化" aria-label="Permalink to &quot;🧰 第 4 フェーズ：共通コンポーネント・UI 強化&quot;">​</a></h3><ul><li><code>components/ui</code>, <code>shared/</code> の構築（Shadcn UI 導入）</li><li>トースト、モーダル、ボタン、カードなど共通コンポーネント整備</li><li><code>utils/</code>, <code>types/</code>, <code>lib/</code> 整備して開発効率を上げる</li></ul><hr><h3 id="🧪-第-5-フェーズ-テスト・マイグレーション・ci-整備" tabindex="-1">🧪 第 5 フェーズ：テスト・マイグレーション・CI 整備 <a class="header-anchor" href="#🧪-第-5-フェーズ-テスト・マイグレーション・ci-整備" aria-label="Permalink to &quot;🧪 第 5 フェーズ：テスト・マイグレーション・CI 整備&quot;">​</a></h3><ul><li><code>tests/</code> に Vitest でユニットテスト</li><li><code>db/migrations</code> に D1 マイグレーションスクリプトを整理</li><li>GitHub Actions や CI/CD を導入</li></ul><hr><h3 id="✨-最終フェーズ-本番デプロイ-スケーラビリティ対応" tabindex="-1">✨ 最終フェーズ：本番デプロイ &amp; スケーラビリティ対応 <a class="header-anchor" href="#✨-最終フェーズ-本番デプロイ-スケーラビリティ対応" aria-label="Permalink to &quot;✨ 最終フェーズ：本番デプロイ &amp; スケーラビリティ対応&quot;">​</a></h3><ul><li><code>wrangler.prod.toml</code> や <code>ENV</code> 管理の最終調整</li><li>Cloudflare Pages + Workers でデプロイ</li><li>アナリティクス、キャッシュ、パフォーマンスチューニングなど</li></ul><hr><h2 id="✅-次にやること-今すぐできる" tabindex="-1">✅ 次にやること（今すぐできる） <a class="header-anchor" href="#✅-次にやること-今すぐできる" aria-label="Permalink to &quot;✅ 次にやること（今すぐできる）&quot;">​</a></h2><p>この理想構成に向けて、まずは：</p><ol><li><strong>現在の <code>frontend</code> / <code>backend</code> のファイル構成をこの構造に近づける</strong></li><li><strong><code>products</code> GET API 完全版（一覧 + 詳細）をバックエンドで整理</strong></li><li><strong>Next.js 側で <code>/products</code> と <code>/products/[id]</code> ページを作成</strong></li></ol><p>ここから始めてみましょうか？<br> 「第 1 フェーズを始めたい」と言っていただければ、具体的にやることリストとファイルテンプレートをすぐ提示します！</p><p>どう進めましょう？またはもうすでにある程度構築しているところがあれば、それに応じて調整しますよ。</p>',28)]))}const b=o(l,[["render",t]]);export{p as __pageData,b as default};
